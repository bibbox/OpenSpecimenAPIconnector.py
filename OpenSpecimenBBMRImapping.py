#! /bin/python3

from os_core.site import sites
from os_core.jsons import Json_factory
from os_core.users import users
from os_core.collecttion_protocol_registration import collection_protocol_registration
from os_core.collection_protocoll import collection_protocol

import json
import pandas as pd
import xlsxwriter
from openpyxl import load_workbook


# URL to OpenSpecimen and Logindata
base_url = 'http://biobank-7-2.silicolab.bibbox.org/openspecimen/rest/ng'
auth = ('admin', 'Login@123')

#shhetnames:
bb_sheet = "eu_bbmri_eric_biobanks"
per_sheet = "eu_bbmri_eric_persons"
cp_sheet = "eu_bbmri_eric_collections"

#file_output
output_file = "test.xlsx"

# Load headers of BBMRI_ERIC Directory
template_file_name="empty_eric_duo.xlsx"
bbmri_file = pd.read_excel(template_file_name, sheet_name = None)



#initialize Users,CollectionProtocols, Sites
protocols = collection_protocol(base_url = base_url, auth = auth)
user = users(base_url = base_url, auth = auth)
site = sites(base_url = base_url, auth = auth)

#Dict what now can't be done via OpenSpecimen extension Fields in persons
persons_extensions={
    "title_before_name":None,
    "title_after_name":None,
    "zip":"123456",
    "city":"City",
    "country":"GR",
    "collections":None
}

biobank_extensions ={
    "partner_charter_signed":'0',
    "head_title_before_name":None,
    "head_role":"PI",
    "contact_priority":"1"
}

# Mapping between OpenSpecimen keywords and bbmri keywords regarding persons
person_map = {
    "first_name":"firstName",
    "last_name":"lastName",
    "email":"emailAddress",
    "phone":"phoneNumber",
    "address":"address",
    "biobanks":"instituteName"
}

# Mapping between OpenSpecimen keyqords and BBMRI keywords regarding biobanks
biobank_map = {
    "name":"name",
    "partner_charter_signed":"partner_chart",
    "collections":"collection_protocols_already_in_biobank"
}

#Mapping between Openspecimne keywords and BBMRI keywords regarding CollectionProtocols
collection_map= {
    "acronym":"shortTitle",
    "name":"title",

}
#load Openspecimen Collection Protocols
cps = protocols.get_all_collection_protocols()

# get all CP-IDs
collection_protocol_ids=[]
for cp in cps:
    collection_protocol_ids.append(cp['id'])
collection_protocol_ids[2] #One CP is empty


#writing all Collection protocols to the bbmri-dict
for cp_id in collection_protocol_ids:
    cp = protocols.get_collection_protocol(cpid = str(cp_id))

    #extract User
    OS_user_id = cp['principalInvestigator']['id']
    OS_user = user.get_user(userId = OS_user_id)

    #extractSite
    OS_site_name = cp['cpSites'][0]['siteName']
    OS_sites = site.get_all_sites()
    for i in range(len(OS_sites)):
        if OS_sites[i]['name']==OS_site_name:
            OS_site_id=OS_sites[i]['id']
    OS_site=site.get_site(siteid = OS_site_id)


    #  fill the bbmri_persons_dict
    index_=0
    for key in bbmri_file[per_sheet].keys():
        index_+=1
        # fileds which can't generated by OpenSpecimen for now
        if key in persons_extensions.keys():
            print(type(bbmri_file[per_sheet]))
            bbmri_file[per_sheet][key][key]=persons_extensions[key]
            #[key].append(pd.Series(persons_extensions[key]))
            print(persons_extensions[key])
            print(bbmri_file[per_sheet][key])

        # standard fields in OpenSpecimen which are named differently to BBMRI
        elif key in person_map.keys():
            bbmri_file[per_sheet][key]=OS_user[person_map[key]]

    print(bbmri_file[per_sheet])
    # fill the Biobank fields

    attrs = OS_site['extensionDetail']['attrs']     #extract BBMRI-Extension-Details
    # ExtensionFields are called differently in Openspecimen #TODO-for MIABIS Plugin
    for attr in attrs:
        attr["caption"]=attr["caption"].lower().replace(" ","_")
        if isinstance(attr['value'],list):
            for i in range(len(attr['value'])):
                string+=attr['value'][i]+', '
            string=string[0:-2]
            attr['value']=string
        
        # append the OS_Biobank dict with the extensiondetails, such that there are lesser if statements
        OS_site[attr["caption"]]=attr['value']

    i=0
    for key in bbmri_file[bb_sheet].keys():
        i+=1
        # The Persons ID is stored in the BIobank contact,
        if key =='contact':
            bbmri_file[per_sheet]['id']=OS_site[key]
            print(bbmri_file[per_sheet]['id'])


        # fileds which can't generated by OpenSpecimen for now
        if key in biobank_extensions.keys():
            bbmri_file[bb_sheet][key]=biobank_extensions[key]
            print('#ext'+str(i))
            print(bbmri_file[bb_sheet][key])
            print(biobank_extensions[key])

        # standard fields in OpenSpecimen which are named differently to BBMRI
        elif key in biobank_map.keys():
            bbmri_file[bb_sheet][key]=OS_site[biobank_map[key]]
            print('#map'+str(i))
            print(bbmri_file[bb_sheet][key])
            print(OS_site[biobank_map[key]])

        # fields which are named same to BBMRI
        elif key in OS_site.keys():  
            bbmri_file[bb_sheet][key]=OS_site[key]
            print('#map'+str(i))
            print(bbmri_file[bb_sheet][key])
            print(OS_site[key])

        #test
        else:
            print('#wtf'+str(i))


    print(bbmri_file[bb_sheet])   
#fill the BBBMRI Biobank dict
'''
biobank_json['name'] = OS_site_name

for atr in attrs:
    id_ = atr["caption"].lower()
    id_ = id_.replace(" ", "_")
    
    else:
        string=atr['value']
    biobank_json[id_]=string



attrs=cp['extensionDetail']['attrs']
collection_json=collection_header_json
'''

##fill json-dict, with OpenSpecimen standard fields
for key in cp:
    if key in collection_map.keys():
        collection_json[collection_map[key]]=cp[key]


for atr in attrs:
    id_ = atr["caption"].lower()
    id_ = id_.replace(" ", "_")
    if id_== "bbmri_collection_id":    
        id_="id"
    if isinstance(atr['value'],list):
        string = str('')
        for i in range(len(atr['value'])):
            string+=str(atr['value'][i])+ ', '
        string=string[0:-2]
    else:
        string=atr['value']
    collection_json[id_]=string
    collection_json[id_]=atr['value']

# Write the excel file
filename='empty_eric_duo (copy).xlsx'
df = pd.json_normalize(biobank_json)
with pd.ExcelWriter(filename, engine = 'openpyxl', mode = 'a') as writer:
    writer.book = load_workbook(filename)
    df.to_excel(writer, sheet_name = bb_sheet,  index = False)
df = pd.json_normalize(collection_json)
with pd.ExcelWriter(filename, engine = 'openpyxl', mode = 'a') as writer:
    writer.book = load_workbook(filename)
    df.to_excel(writer, sheet_name = cp_sheet,  index = False)
df = pd.json_normalize(person_json)
with pd.ExcelWriter(filename, engine = 'openpyxl', mode = 'a') as writer:
    writer.book = load_workbook(filename)
    df.to_excel(writer, sheet_name = per_sheet,  index = False)

#writer = pd.ExcelWriter('test.xlsx', engine = 'openpyxl', mode = 'a')

#df.to_excel(writer, sheet_name = bb_sheet, index =False, header = None)
#writer.save()

'''
#print(bbmri_file)
#df = pd.json_normalize(biobank_json)
#print(type(df))
#df.to_excel('test.xlsx', index=False,  sheet_name=bb_sheet)

#bbmri_file[bb_sheet] = pd.json_normalize(biobank_json)
#bbmri_file[per_sheet] = pd.json_normalize(person_json)
#bbmri_file[cp_sheet] = pd.json_normalize(collection_json)

#df = pd.json_normalize(bbmri_file)
#print(type(df))
#print(df.ndim)

#print(bbmri_file)

#df = pd.DataFrame.from_dict(bbmri_file)

#df.to_excel('test.xlsx', sheet_name = None, index = False)
'''
